* Autogenerated by the Creatures Map Editor
* For more info see http://cdn.creatures.net

* Addon file: deletes existing metarooms at the same place, same background name
* 1 metarooms, 55 rooms, 60 doors

mapd 100000 100000

setv game "ZEN_SHEE" 1

setv game "mapeditortmp" addm 38616 1310 4608 1792 "BansheeBridgeGreen"
mmsc 40920 2206 ""
setv va00 addr game "mapeditortmp" 38801 38904 1894 1802 1946 1946
rtyp va00 5
rmsc 38852 1920 ""
setv game "mapeditortmp_0" va00
setv va00 addr game "mapeditortmp" 38904 39118 1802 1726 1946 1946
rtyp va00 5
rmsc 39011 1874 ""
setv game "mapeditortmp_1" va00
setv va00 addr game "mapeditortmp" 39118 39442 1726 1662 1946 1946
rtyp va00 5
rmsc 39280 1836 ""
setv game "mapeditortmp_2" va00
setv va00 addr game "mapeditortmp" 39442 39761 1662 1622 1946 1946
rtyp va00 5
rmsc 39601 1804 ""
setv game "mapeditortmp_3" va00
setv va00 addr game "mapeditortmp" 39761 40053 1622 1592 1946 1946
rtyp va00 5
rmsc 39907 1784 ""
setv game "mapeditortmp_4" va00
setv va00 addr game "mapeditortmp" 40053 40462 1592 1570 1796 1797
rtyp va00 5
rmsc 40257 1694 ""
setv game "mapeditortmp_5" va00
setv va00 addr game "mapeditortmp" 38946 38952 2050 2052 2226 2227
rtyp va00 5
rmsc 38949 2138 ""
setv game "mapeditortmp_6" va00
setv va00 addr game "mapeditortmp" 39202 39349 1946 1946 2014 2013
rtyp va00 5
rmsc 39275 1979 ""
setv game "mapeditortmp_7" va00
setv va00 addr game "mapeditortmp" 39324 39454 2283 2283 2516 2516
rtyp va00 5
rmsc 39389 2399 ""
setv game "mapeditortmp_8" va00
setv va00 addr game "mapeditortmp" 39190 39324 2283 2283 2514 2516
rtyp va00 5
rmsc 39257 2399 ""
setv game "mapeditortmp_9" va00
setv va00 addr game "mapeditortmp" 39202 39349 2014 2013 2224 2224
rtyp va00 5
rmsc 39275 2119 ""
setv game "mapeditortmp_10" va00
setv va00 addr game "mapeditortmp" 39454 39546 2283 2315 2516 2516
rtyp va00 5
rmsc 39500 2399 ""
setv game "mapeditortmp_11" va00
setv va00 addr game "mapeditortmp" 39546 39601 2315 2324 2516 2516
rtyp va00 5
rmsc 39573 2415 ""
setv game "mapeditortmp_12" va00
setv va00 addr game "mapeditortmp" 39601 39868 2324 2325 2516 2516
rtyp va00 5
rmsc 39734 2420 ""
setv game "mapeditortmp_13" va00
setv va00 addr game "mapeditortmp" 39868 40235 2325 2325 2516 2516
rtyp va00 5
rmsc 40051 2420 ""
setv game "mapeditortmp_14" va00
setv va00 addr game "mapeditortmp" 39172 39202 2047 2014 2234 2224
rtyp va00 5
rmsc 39187 2135 ""
setv game "mapeditortmp_15" va00
setv va00 addr game "mapeditortmp" 39938 40280 2051 2051 2225 2225
rtyp va00 5
rmsc 40109 2138 ""
setv game "mapeditortmp_16" va00
setv va00 addr game "mapeditortmp" 40235 40781 2325 2326 2516 2516
rtyp va00 5
rmsc 40508 2420 ""
setv game "mapeditortmp_17" va00
setv va00 addr game "mapeditortmp" 40781 41099 2326 2324 2516 2516
rtyp va00 5
rmsc 40940 2421 ""
setv game "mapeditortmp_18" va00
setv va00 addr game "mapeditortmp" 41099 41167 2358 2429 2516 2516
rtyp va00 5
rmsc 41133 2437 ""
setv game "mapeditortmp_19" va00
setv va00 addr game "mapeditortmp" 40280 40826 2051 2049 2225 2225
rtyp va00 5
rmsc 40553 2138 ""
setv game "mapeditortmp_20" va00
setv va00 addr game "mapeditortmp" 40826 41300 2049 2050 2225 2225
rtyp va00 5
rmsc 41063 2137 ""
setv game "mapeditortmp_21" va00
setv va00 addr game "mapeditortmp" 41300 41649 2050 2048 2225 2225
rtyp va00 5
rmsc 41474 2137 ""
setv game "mapeditortmp_22" va00
setv va00 addr game "mapeditortmp" 41649 41886 2048 2042 2225 2225
rtyp va00 5
rmsc 41767 2136 ""
setv game "mapeditortmp_23" va00
setv va00 addr game "mapeditortmp" 41886 41925 2047 2047 2225 2225
rtyp va00 5
rmsc 41905 2136 ""
setv game "mapeditortmp_24" va00
setv va00 addr game "mapeditortmp" 41925 42379 2047 2046 2225 2225
rtyp va00 5
rmsc 42152 2136 ""
setv game "mapeditortmp_25" va00
setv va00 addr game "mapeditortmp" 42379 42428 2046 2064 2225 2225
rtyp va00 5
rmsc 42403 2135 ""
setv game "mapeditortmp_26" va00
setv va00 addr game "mapeditortmp" 42428 42773 2064 2092 2225 2373
rtyp va00 5
rmsc 42600 2218 ""
setv game "mapeditortmp_27" va00
setv va00 addr game "mapeditortmp" 40462 40594 1570 1751 1797 1800
rtyp va00 5
rmsc 40528 1685 ""
setv game "mapeditortmp_28" va00
setv va00 addr game "mapeditortmp" 40600 40664 1813 1813 1946 1946
rtyp va00 5
rmsc 40632 1879 ""
setv game "mapeditortmp_29" va00
setv va00 addr game "mapeditortmp" 40664 40715 1813 1720 1946 1946
rtyp va00 5
rmsc 40689 1879 ""
setv game "mapeditortmp_30" va00
setv va00 addr game "mapeditortmp" 40715 41033 1720 1721 1946 1946
rtyp va00 5
rmsc 40874 1833 ""
setv game "mapeditortmp_31" va00
setv va00 addr game "mapeditortmp" 41033 41384 1721 1718 1946 1946
rtyp va00 5
rmsc 41208 1833 ""
setv game "mapeditortmp_32" va00
setv va00 addr game "mapeditortmp" 41384 41694 1718 1720 1946 1946
rtyp va00 5
rmsc 41539 1832 ""
setv game "mapeditortmp_33" va00
setv va00 addr game "mapeditortmp" 41694 41811 1720 1693 1946 1963
rtyp va00 5
rmsc 41752 1841 ""
setv game "mapeditortmp_34" va00
setv va00 addr game "mapeditortmp" 41891 42123 1559 1595 1946 1907
rtyp va00 5
rmsc 42007 1733 ""
setv game "mapeditortmp_35" va00
setv va00 addr game "mapeditortmp" 42123 42304 1595 1757 1907 1876
rtyp va00 5
rmsc 42213 1735 ""
setv game "mapeditortmp_36" va00
setv va00 addr game "mapeditortmp" 41565 41694 1591 1564 1719 1720
rtyp va00 5
rmsc 41629 1655 ""
setv game "mapeditortmp_37" va00
setv va00 addr game "mapeditortmp" 41694 41891 1564 1559 1720 1675
rtyp va00 5
rmsc 41792 1619 ""
setv game "mapeditortmp_38" va00
setv va00 addr game "mapeditortmp" 38952 39172 2052 2047 2227 2234
rtyp va00 5
rmsc 39062 2143 ""
setv game "mapeditortmp_39" va00
setv va00 addr game "mapeditortmp" 39349 39380 2013 2056 2224 2226
rtyp va00 5
rmsc 39364 2119 ""
setv game "mapeditortmp_40" va00
setv va00 addr game "mapeditortmp" 40053 40300 1813 1816 1946 1946
rtyp va00 5
rmsc 40176 1879 ""
setv game "mapeditortmp_41" va00
setv va00 addr game "mapeditortmp" 40300 40600 1816 1813 1946 1946
rtyp va00 5
rmsc 40450 1881 ""
setv game "mapeditortmp_42" va00
setv va00 addr game "mapeditortmp" 39115 39190 2257 2283 2374 2448
rtyp va00 5
rmsc 39152 2352 ""
setv game "mapeditortmp_43" va00
setv va00 addr game "mapeditortmp" 39063 39115 2249 2257 2299 2374
rtyp va00 5
rmsc 39089 2311 ""
setv game "mapeditortmp_44" va00
setv va00 addr game "mapeditortmp" 38996 39063 2249 2249 2257 2299
rtyp va00 5
rmsc 39029 2274 ""
setv game "mapeditortmp_45" va00
setv va00 addr game "mapeditortmp" 38891 38946 2048 2050 2180 2226
rtyp va00 5
rmsc 38918 2137 ""
setv game "mapeditortmp_46" va00
setv va00 addr game "mapeditortmp" 38842 38891 2051 2048 2125 2180
rtyp va00 5
rmsc 38866 2115 ""
setv game "mapeditortmp_47" va00
setv va00 addr game "mapeditortmp" 38807 38842 2050 2051 2059 2125
rtyp va00 5
rmsc 38824 2087 ""
setv game "mapeditortmp_48" va00
setv va00 addr game "mapeditortmp" 39380 39938 2056 2051 2226 2225
rtyp va00 5
rmsc 39659 2140 ""
setv game "mapeditortmp_49" va00
setv va00 addr game "mapeditortmp" 39202 39343 2224 2224 2283 2283
rtyp va00 5
rmsc 39272 2253 ""
setv game "mapeditortmp_50" va00
setv va00 addr game "mapeditortmp" 41765 41832 2022 2010 2045 2043
rtyp va00 5
rmsc 41798 2032 ""
setv game "mapeditortmp_51" va00
setv va00 addr game "mapeditortmp" 41832 41855 2010 2004 2043 2043
rtyp va00 5
rmsc 41843 2026 ""
setv game "mapeditortmp_52" va00
setv va00 addr game "mapeditortmp" 41855 41886 2004 2028 2043 2042
rtyp va00 5
rmsc 41870 2023 ""
setv game "mapeditortmp_53" va00
setv va00 addr game "mapeditortmp" 41811 41891 1693 1675 1963 1946
rtyp va00 5
rmsc 41851 1819 ""
setv game "mapeditortmp_54" va00

door game "mapeditortmp_0" game "mapeditortmp_1" 100
door game "mapeditortmp_1" game "mapeditortmp_2" 100
door game "mapeditortmp_2" game "mapeditortmp_3" 100
door game "mapeditortmp_2" game "mapeditortmp_7" 50
door game "mapeditortmp_3" game "mapeditortmp_4" 100
door game "mapeditortmp_4" game "mapeditortmp_5" 100
door game "mapeditortmp_4" game "mapeditortmp_41" 100
door game "mapeditortmp_5" game "mapeditortmp_28" 100
door game "mapeditortmp_6" game "mapeditortmp_39" 100
door game "mapeditortmp_6" game "mapeditortmp_46" 100

door game "mapeditortmp_7" game "mapeditortmp_10" 50
door game "mapeditortmp_8" game "mapeditortmp_9" 100
door game "mapeditortmp_8" game "mapeditortmp_11" 100
door game "mapeditortmp_8" game "mapeditortmp_50" 50
door game "mapeditortmp_9" game "mapeditortmp_43" 100
door game "mapeditortmp_9" game "mapeditortmp_50" 50
door game "mapeditortmp_10" game "mapeditortmp_15" 100
door game "mapeditortmp_10" game "mapeditortmp_40" 100
door game "mapeditortmp_10" game "mapeditortmp_50" 50
door game "mapeditortmp_11" game "mapeditortmp_12" 100

door game "mapeditortmp_12" game "mapeditortmp_13" 100
door game "mapeditortmp_13" game "mapeditortmp_14" 100
door game "mapeditortmp_14" game "mapeditortmp_17" 100
door game "mapeditortmp_15" game "mapeditortmp_39" 100
door game "mapeditortmp_16" game "mapeditortmp_20" 100
door game "mapeditortmp_16" game "mapeditortmp_49" 100
door game "mapeditortmp_17" game "mapeditortmp_18" 100
door game "mapeditortmp_18" game "mapeditortmp_19" 100
door game "mapeditortmp_20" game "mapeditortmp_21" 100
door game "mapeditortmp_21" game "mapeditortmp_22" 100

door game "mapeditortmp_22" game "mapeditortmp_23" 100
door game "mapeditortmp_23" game "mapeditortmp_24" 0
door game "mapeditortmp_23" game "mapeditortmp_51" 100
door game "mapeditortmp_23" game "mapeditortmp_52" 100
door game "mapeditortmp_23" game "mapeditortmp_53" 100
door game "mapeditortmp_24" game "mapeditortmp_25" 0
door game "mapeditortmp_25" game "mapeditortmp_26" 100
door game "mapeditortmp_26" game "mapeditortmp_27" 0
door game "mapeditortmp_29" game "mapeditortmp_30" 100
door game "mapeditortmp_29" game "mapeditortmp_42" 100

door game "mapeditortmp_30" game "mapeditortmp_31" 100
door game "mapeditortmp_31" game "mapeditortmp_32" 100
door game "mapeditortmp_32" game "mapeditortmp_33" 100
door game "mapeditortmp_33" game "mapeditortmp_34" 100
door game "mapeditortmp_33" game "mapeditortmp_37" 100
door game "mapeditortmp_34" game "mapeditortmp_38" 100
door game "mapeditortmp_34" game "mapeditortmp_54" 100
door game "mapeditortmp_35" game "mapeditortmp_36" 100
door game "mapeditortmp_35" game "mapeditortmp_38" 100
door game "mapeditortmp_35" game "mapeditortmp_54" 100

door game "mapeditortmp_37" game "mapeditortmp_38" 100
door game "mapeditortmp_38" game "mapeditortmp_54" 100
door game "mapeditortmp_40" game "mapeditortmp_49" 100
door game "mapeditortmp_41" game "mapeditortmp_42" 100
door game "mapeditortmp_43" game "mapeditortmp_44" 100
door game "mapeditortmp_44" game "mapeditortmp_45" 100
door game "mapeditortmp_46" game "mapeditortmp_47" 100
door game "mapeditortmp_47" game "mapeditortmp_48" 100
door game "mapeditortmp_51" game "mapeditortmp_52" 100
door game "mapeditortmp_52" game "mapeditortmp_53" 100

delg "mapeditortmp_0"
delg "mapeditortmp_1"
delg "mapeditortmp_2"
delg "mapeditortmp_3"
delg "mapeditortmp_4"
delg "mapeditortmp_5"
delg "mapeditortmp_6"
delg "mapeditortmp_7"
delg "mapeditortmp_8"
delg "mapeditortmp_9"
delg "mapeditortmp_10"
delg "mapeditortmp_11"
delg "mapeditortmp_12"
delg "mapeditortmp_13"
delg "mapeditortmp_14"
delg "mapeditortmp_15"
delg "mapeditortmp_16"
delg "mapeditortmp_17"
delg "mapeditortmp_18"
delg "mapeditortmp_19"
delg "mapeditortmp_20"
delg "mapeditortmp_21"
delg "mapeditortmp_22"
delg "mapeditortmp_23"
delg "mapeditortmp_24"
delg "mapeditortmp_25"
delg "mapeditortmp_26"
delg "mapeditortmp_27"
delg "mapeditortmp_28"
delg "mapeditortmp_29"
delg "mapeditortmp_30"
delg "mapeditortmp_31"
delg "mapeditortmp_32"
delg "mapeditortmp_33"
delg "mapeditortmp_34"
delg "mapeditortmp_35"
delg "mapeditortmp_36"
delg "mapeditortmp_37"
delg "mapeditortmp_38"
delg "mapeditortmp_39"
delg "mapeditortmp_40"
delg "mapeditortmp_41"
delg "mapeditortmp_42"
delg "mapeditortmp_43"
delg "mapeditortmp_44"
delg "mapeditortmp_45"
delg "mapeditortmp_46"
delg "mapeditortmp_47"
delg "mapeditortmp_48"
delg "mapeditortmp_49"
delg "mapeditortmp_50"
delg "mapeditortmp_51"
delg "mapeditortmp_52"
delg "mapeditortmp_53"
delg "mapeditortmp_54"

new: simp 1 3 10600 "fav_place_banshee" 1 0 1
attr 272
mvto 39350 2350
tick 10


cmra 39350 2350 0


************************************************************************
*************agents*****************************************************
************************************************************************

***********banshee docking c3********
*+---------------------+
*|                     |
*| capillata_umbilical |
*|                     |
*+---------------------+
* The Umbilical is only present in Docked Worlds, so we need to check if that is the case.
doif eame "engine_no_auxiliary_bootstrap_1" = 0
** CU (C3 Side)
	new: simp 1 1 96 "lungfix" 0 0 104
	mvto 6261 4202
	new: comp 3 1 10401 "capillata_umbilical" 2 1 103
** Can be activated by the hand, but is invisible to creatures.
	attr 4
	bhvr 2
	mvto 6087 4258
** Energizer (dull part)
	pat: dull 1 "capillata_umbilical" 8 -40 -92 5000
	part 1
	anim [0]
** Frame
	pat: dull 2 "banshdock" 0 -223 -101 0
** Spark
	pat: dull 3 "capillata_umbilical" 3 -26 -45 103
	part 3
	anim [0]
** Status NAME Variable (so we know when it is OK to use)
	sets name "status" "inactive"
** Save TARG to a game variable
	seta game "CUc3" targ
** Save Room for CA Link
	setv va00 room targ

** Destination Energizer
	new: simp 1 1 192 "capillata_umbilical" 9 8 0
	attr 16
	anim [1 2 3 4 5 6 7 8 255]
	show 0
	mvto -5000 -5000
** Save TARG to a game variable
	seta game "CUc3DE" targ



********************************
** CU (Banshee Side)
	new: comp 3 1 10400 "capillata_umbilical" 2 18 0
** Can be activated by the hand, but is invisible to creatures.
	attr 4
	bhvr 1
	mvto 39959 2461
** Energizer (dull part)
	pat: dull 1 "capillata_umbilical" 8 -40 -95 1
	part 1
	anim [0]
** Frame
	pat: dull 2 "blnk" 0 -80 -25 0
** Spark
	pat: dull 3 "capillata_umbilical" 3 -30 -55 0
	part 3
	anim [0]
** Status NAME Variable (so we know when it is OK to use)
	sets name "status" "inactive"
** Save TARG to a game variable
	seta game "CUds" targ
** Save Room for CA Link
	setv va01 room targ

** Destination Energizer
	new: simp 1 1 192 "capillata_umbilical" 9 8 0
	attr 16
	anim [1 2 3 4 5 6 7 8 255]
	show 0
	mvto -5000 -5000
** Save TARG to a game variable
	seta game "CUdsDE" targ


** CA Link (Between the room that each Call Button is in.)
	link va00 va01 100
endi



********************************************************************
*Banshee Docking ds
*+---------------------+
*|                     |
*| capillata_umbilical |
*|                     |
*+---------------------+
* The C3DS umbilcal takes presidence over this one, so the script should check to see if the world is docked before it installs
doif eame "engine_no_auxiliary_bootstrap_1" = 1
** CU (DS Side)
	new: comp 3 1 10401 "capillata_umbilical" 2 18 5000
** Can be activated by the hand, but is invisible to creatures.
	attr 4
	bhvr 1
	mvto 2612 9135
** Energizer (dull part)
	pat: dull 1 "capillata_umbilical" 8 -40 -95 1
	part 1
	anim [0]
** Frame
	pat: dull 2 "capillata_umbilical" 17 -80 -25 0
** Spark
	pat: dull 3 "capillata_umbilical" 20 -30 -1 0
	part 3
	anim [0]
** Status NAME Variable (so we know when it is OK to use)
	sets name "status" "inactive"
** Save TARG to a game variable
	seta game "CUc3" targ
** Save Room for CA Link
	setv va00 room targ

** Destination Energizer
	new: simp 1 1 192 "capillata_umbilical" 9 8 0
	attr 16
	anim [1 2 3 4 5 6 7 8 255]
	show 0
	mvto -5000 -5000
** Save TARG to a game variable
	seta game "CUc3DE" targ



********************************
** CU (Banshee Side)
	new: comp 3 1 10400 "capillata_umbilical" 2 18 0
** Can be activated by the hand, but is invisible to creatures.
	attr 4
	bhvr 1
	mvto 39959 2461
** Energizer (dull part)
	pat: dull 1 "capillata_umbilical" 8 -40 -95 1
	part 1
	anim [0]
** Frame
	pat: dull 2 "blnk" 0 -80 -25 0
** Spark
	pat: dull 3 "capillata_umbilical" 3 -30 -55 0
	part 3
	anim [0]
** Status NAME Variable (so we know when it is OK to use)
	sets name "status" "inactive"
** Save TARG to a game variable
	seta game "CUds" targ
** Save Room for CA Link
	setv va01 room targ

** Destination Energizer
	new: simp 1 1 192 "capillata_umbilical" 9 8 0
	attr 16
	anim [1 2 3 4 5 6 7 8 255]
	show 0
	mvto -5000 -5000
** Save TARG to a game variable
	seta game "CUdsDE" targ


** CA Link (Between the room that each Call Button is in.)
	link va00 va01 100
endi








***************************************************************************


new: comp 3 8 19 "anti-infection_spray" 10 0 5005
attr 199

bhvr 41
perm 64
elas 20
accg 1.64
fric 100

pat: dull 1 "anti-infection_spray" 10 4 -38 0

prt: inew 0 "input" "anti-infection_spray input" 14 42 2001
prt: onew 0 "output" "anti-infection_spray output" 35 42

mvto 40156 1716
SETV OV61 100
emit 18 .35






*****************************************************************


new: comp 3 8 20 "infection_detector" 1 0 5001
attr 199

bhvr 41
perm 64
elas 20
accg 1.64
fric 100

pat: dull 1 "infection_detector" 1 6 5 0

pat: butt 2 "infection_detector" 12 2 32 22 0 [] 2000 0

pat: dull 3 "infection_detector" 14 5 25 0

prt: inew 0 "input" "infection_detector input" 10 41 2001
prt: onew 0 "output" "infection_detector output" 44 41

mvto 40302 1872
SETV OV61 100
emit 18 .35







*************************************************************************



new: comp 3 8 12 "counter" 15 0 5000
bhvr 41
elas 55
attr 198
accg 5
aero 10
perm 100
fric 50
clac -1
mvto 39780 2119
emit 18 .25


pat: butt 1 "counter" 21 0 62 6 0 [] 1064 1
pat: butt 2 "counter" 22 0 62 20 0 [] 1164 1
pat: dull 3 "counter" 1 22 3 0

prt: inew 0 "input counter" "listens for input signals and counts them" 8 14 1264
prt: onew 0 "input outputer" "passes on input signal when certain count is reached" 8 24

setv ov01 0
setv ov02 10
setv ov61 100
setv ov70 -1
setv ov78 1
setv ov75 255
setv ov91 1
tick 0






******************************************************************


new: comp 3 8 1 "detector" 18 0 5000
attr 199
accg 4
perm 60
mvto 41720 1793
elas 0
fric 80
clac -1
bhvr 41
setv ov90 500
setv ov01 0
setv ov02 0
setv ov61 100
rnge ov90
prt: inew 0 "detect in" "activation value" 5 32 1000
prt: onew 0 "detect out" "creature (type or range?)" 4 48
emit 18 0.2
part 0
anim [0]

pat: dull 1 "detector" 8 19 25 0
part 1
anim [0]

pat: butt 2 "detector" 14 2 0 47 0 [] 2000 1

part 2
anim [0]


pat: butt 3 "detector" 16 2 35 47 0 [] 2002 1
part 3
anim [0]



*************************************************************************

reps 1
	new: comp 3 8 13 "delayer" 0 0 5000

	elas 0
	bhvr 41
	attr 198
	accg 5
	perm 100
	clac 1002


	pat: butt 1 "delayer" 21 0 15 35 0 [] 1000 1

	pat: butt 2 "delayer" 22 0 35 35 0 [] 1001 1

	pat: dull 3 "delayer" 0 9 7 0

	pat: dull 4 "delayer" 0 15 10 0

	prt: inew 0 "signal ear" "awaiting a signal" 57 13 1003
	prt: onew 0 "signal mouth" "emitting a delayed signal" 57 26


	setv ov00 0



	setv ov61 100

	part 4
	frat 2
	anim [33 28 29 30 31 32 33 32 31 30 29 255]
	part 3
	pose 33

	part 0
	frat 1
	anim [25 25 25 26 26 27 26 26 255]


	mvto 41430 2082

	emit 18 .25
repe



*******************************************************************



new: simp 3 8 11 "lightmod" 12 0 5000
perm 60
mvto 40121 2100
attr 199
clac 0
elas 10
tick 0
bhvr 41
aero 5
fric 100
accg 4
velo 0 0
seta ov01 null
setv ov61 100
base 0
anim [0]
prt: inew 0 "light in" "light setting" 3 17 1000
prt: onew 0 "light out" "light setting" 8 28


tick 1
emit 18 0.2




****************************************************************



new: comp 3 8 6 "logicgates" 1 0 5000
attr 199
clac 0
elas 0
accg 3
perm 60
bhvr 41

setv ov61 100


setv ov00 1

setv ov01 999
setv ov02 999


pat: dull 1 "logicgates" 3 10 1 1

pat: dull 2 "logicgates" 5 9 18 1

pat: dull 3 "logicgates" 7 34 10 1

pat: dull 4 "logicgates" 1 16 5 1

prt: inew 0 "Logic input 1" " " 2 6 1000
prt: inew 1 "Logic input 2" " " 2 20 1001
prt: onew 0 "Logic Output" " " 44 12

mvto 39674 2091
emit 18 0.2






***********************************************************


new: comp 3 8 10 "mediscan" 22 0 5000
attr 199
accg 4
perm 60
mvto 39646 2361
elas 0
fric 80
bhvr 41
clac 0
setv ov90 14
setv ov00 0
setv ov01 0
setv ov02 0
setv ov90 0
setv ov61 100
prt: inew 0 "scan in" "activation value" 45 37 1000
prt: onew 0 "scan out" "creature health" 42 49
emit 18 0.2
part 0
anim [0]

pat: dull 1 "mediscan" 1 16 2 0
part 1
anim [0]

pat: butt 2 "mediscan" 16 2 1 12 0 [] 2000 0

part 2
anim [0]

pat: dull 3 "mediscan" 18 44 9 0
part 3
anim [0]
pat: dull 4 "mediscan" 20 44 22 0
part 4
anim [0]




******************************************************









* reps 20
* 	new: simp 2 14 4 "mossie" 24 0 300
* 	attr 66
* 
* 	bhvr 49
* 	tick 5
* 
* 	setv ov61 40
* 
* 	mvsf rand 41587 42052 rand 1580 1904
* 	setv ov10 rand 0 1
* 	doif ov10 eq 0
* 		setv ov10 -1
* 	endi
* 	setv ov11 rand 0 1
* 	doif ov11 eq 0
* 		setv ov11 -1
* 	endi
*  repe




***************************************************************************



new: comp 3 8 18 "numeric_output_tool" 0 0 5002
attr 199
bhvr 41
elas 20
perm 64
accg 20
aero 20

pat: fixd 1 "numeric_output_tool" 2 7 9 0 "WhiteOnTransparentChars"

pat: fixd 2 "numeric_output_tool" 2 33 9 0 "WhiteOnTransparentChars"

pat: fixd 3 "numeric_output_tool" 2 62 9 0 "WhiteOnTransparentChars"

pat: butt 4 "numeric_output_tool" 2 1 7 9 1 [] 2001 0

pat: butt 5 "numeric_output_tool" 2 1 33 9 1 [] 2002 0

pat: butt 6 "numeric_output_tool" 2 1 62 9 1 [] 2003 0
setv ov71 0
setv ov72 0
setv ov73 0
SETV OV61 100
tran 0 4
tran 0 5
tran 0 6

part 1
frmt 4 4 0 0 0 0 2
sets va01 vtos ov71
ptxt va01
part 2
frmt 4 4 0 0 0 0 2
sets va02 vtos ov72
ptxt va02
part 3
frmt 1 4 0 0 0 0 2
sets va03 vtos ov73
ptxt va03
part 0


prt: inew 0 "input" "numeric_output_tool input" 58 36 2005
prt: onew 0 "output" "numeric_output_tool output" 33 36
mvto 40390 2390
emit 18 .35



**************************************************************





new: comp 3 3 14 "plusminus" 4 0 5000
attr 194
bhvr 40
elas 0
perm 60
fric 100
accg 3
bhvr 41
setv ov61 100

pat: butt 1 "plusminus" 3 1 20 13 1 [] 0 0

pat: butt 2 "plusminus" 3 1 20 34 1 [] 1 0
prt: inew 0 " " " " 41 31 1000
prt: onew 0 " " " " 41 47
emit 10 0.2
mvto 40400 1690





****************************************************************




new: simp 3 8 17 "pregnancy_indication_device" 0 0 5004
attr 199
bhvr 41
elas 20
perm 64
accg 20
aero 20

prt: inew 0 "input" "numeric_output_tool input" 58 54 2000
prt: onew 0 "output" "numeric_output_tool output" 12 54
mvsf 39980 1884
SETV OV61 100
emit 18 .35

seta ov16 null
seta ov17 null




*****************************************************************************


reps 1
	new: simp 3 8 8 "siren" 20 0 5000
	attr 199
	perm 99
	clac 0
	elas 10
	tick 0
	aero 5
	accg 4
	bhvr 41
	setv ov61 100
	mvto 41377 2130
	anim [0]
	prt: inew 0 "siren in" "siren" 24 36 1000
	prt: onew 0 "siren out" "siren" 10 36
	emit 18 0.2
repe



****************************************************************


new: simp 3 8 2 "sludgegun" 30 0 5000
attr 199
bhvr 11
elas 0
accg 7
perm 60
clac 0
setv ov10 -1

setv ov61 100
emit 18 0.2
prt: inew 0 "Sludgegun Input" " " 64 64 1000
prt: onew 0 "Sludgegun throughport" " " 44 64


mvto 40236 1654


new: comp 3 8 7 "logicgates" 1 9 5000
attr 195
accg 5
aero 10
bhvr 41
elas 10
perm 60

setv ov61 100


pat: dull 1 "logicgates" 10 32 1 0


prt: inew 0 "NOT gate input" " " 2 13 1000
prt: onew 0 "NOT output" " " 45 13
emit 18 0.2
mvto 40768 2390
addv va50 40




******************************************************************************

*******HOME smell EMITTERS**************************
**********************************************
**set va00 to 0 to make the emitters invisible
**setv va00 to 1 to make the emitters visible

setv va00 0


**norn home emitter
new: simp 3 6 10402 "blnk" 2 0 0
attr 18
pose va00
mvto 39717 2338
emit 15 .02

**norn home emitter
new: simp 3 6 10402 "blnk" 2 0 0
attr 18
pose va00
mvto 39764 1738
emit 15 .02

**norn home emitter
new: simp 3 6 10402 "blnk" 2 0 0
attr 18
pose va00
mvto 41725 1765
emit 15 .02

**norn home emitter
new: simp 3 6 10402 "blnk" 2 0 0
attr 18
pose va00
mvto 41301 2070
emit 15 .02


***set va00 to 1 to make emitters visible

setv va00 0
***HEAT

new: simp 1 1 10402 "blnk" 1 va00 8000
attr 16
clac 0
emit 2 1.0
mvto 39717 2338

new: simp 1 1 10402 "blnk" 1 va00 8000
attr 16
clac 0
emit 2 1.0
mvto 39764 1738

new: simp 1 1 10402 "blnk" 1 va00 8000
attr 16
clac 0
emit 2 1.0
mvto 41725 1765

new: simp 1 1 10402 "blnk" 1 va00 8000
attr 16
clac 0
emit 2 1.0
mvto 41301 2070

new: simp 1 1 10402 "blnk" 1 va00 8000
attr 16
clac 0
emit 2 1.0
mvto 39500 2150

new: simp 1 1 10402 "blnk" 1 va00 8000
attr 16
clac 0
emit 2 1.0
mvto 42150 2150

new: simp 1 1 10402 "blnk" 1 va00 8000
attr 16
clac 0
emit 2 1.0
mvto 40990 2430

new: simp 1 1 10402 "blnk" 1 va00 8000
attr 16
clac 0
emit 2 1.0
mvto 39060 2150

new: simp 1 1 10402 "blnk" 1 va00 8000
attr 16
clac 0
emit 2 1.0
mvto 40888 1850

new: simp 1 1 10402 "blnk" 1 va00 8000
attr 16
clac 0
emit 2 1.0
mvto 39320 2400


************************************************************************************

***************************************************
* +---------------------------------------------+ *
* |                                             | *
* |    	The Bs Infinite Cheese Machine          | *
* |                                             | *
* +---------------------------------------------+ *
***************************************************


* HIT y
* PUSH y
** banshee ship bridge
new: comp 2 23 1 "infinite_cheese_machine" 44 0 1000
attr 196
bhvr 9
perm 100
elas 0
accg 30
aero 25
fric 100
prt: inew 0 "input" "makes cheese when it hears 255" 35 45 6464
prt: onew 0 "output" "gives a signal whenever it makes cheese" 60 45
pat: dull 1 "infinite_cheese_machine" 46 65 39 0
pat: dull 2 "infinite_cheese_machine" 51 35 0 0
setv ov62 4
seta ov16 null
part 1
pose ov62
puhl -1 35 80
mvsf 38983 2115
tick 1250





**********************************************************************************
*******banshee lift******************************

***Top button***
new: simp 2 12 2 "lift" 2 14 5000
bhvr 1
attr 4
perm 10
clac 0
elas 0
setv ov88 2
setv ov00 0
seta ov16 null
prt: inew 0 "lift call button in" "reads in data" 37 9 1000
prt: onew 0 "lift call button out" "outputs input data or lift call state" 38 20

*****************TOP BUTTON CO-ORDINATES****************
mvto 39400 1868

pose 0

*link areas
setv va66 grap 5850 5975

***Middle Button***
new: simp 2 12 2 "lift" 2 14 5000
bhvr 1
attr 4
perm 10
clac 0
elas 0
setv ov88 3
setv ov00 0
seta ov16 null
prt: inew 0 "lift call button in" "reads in data" 37 9 1000
prt: onew 0 "lift call button out" "outputs input data or lift call state" 38 20
*****************MIDDLE BUTTON CO-ORDINATES**************** (because the button is below the lift place the lift may stop slightly too low)
mvto 39400 2148

pose 0

*link areas
setv va67 grap 5850 6291
*link va66 va67 100

***Bottom Button***
new: simp 2 12 2 "lift" 2 14 50
bhvr 1
attr 4
perm 10
clac 0
elas 0
setv ov88 1
setv ov00 0
seta ov16 null
prt: inew 0 "lift call button in" "reads in data" 37 9 1000
prt: onew 0 "lift call button out" "outputs input data or lift call state" 38 20
*****************BOTTOM BUTTON CO-ORDINATES****************
mvto 39400 2438

pose 0

*link areas
setv va66 grap 5850 6587
*link va66 va67 100

***New Lift***
new: vhcl 3 1 1 "lift" 23 0 50
bhvr 3
attr 12
clac -1
elas 0
*maybe the lift level (maybe set to 1(turns out it had to be :)) (ov80 = starting lift level : 0=bottom, 1=middle, 2=top)
setv ov80 1
*****************LIFT STARTING CO-ORDINATES**************** (probably slightly wrong y co-ordinate)
mvto 39225 2040
seta ov99 null
*Doors
pat: dull 1 "lift" 4 0 0 200
cabn 0 0 121 144
cabw 5
*in the lift button(top)
pat: butt 2 "lift" 16 7 52 68 0 [] 2000 1
*in the lift button(bottom)
pat: butt 3 "lift" 16 7 52 82 0 [] 2001 1

*put the in-lift buttons in the right anim
part 2
anim [4]
part 3
anim [5]

*makes the buttons with no lift already assigned to them assigned to this lift (connects the lift to it's buttons)
seta va00 targ
enum 2 12 2
	doif ov16 = null
		seta ov16 va00
	endi
next
*targets the lift
targ va00
*make lift doors(pt1) closed(7)
part 1
anim [7]





***************************************************************************

***************blocked off doors**********

*door top 1
new: simp 1 1 10404 "xdoor" 0 0 1
mvto 41102 1806
attr 4

*door top 2
new: simp 1 1 10405 "xdoor" 0 0 1
mvto 41443 1806
attr 4

*door 1
new: simp 1 1 10406 "xdoor" 0 0 0
mvto 39950 2089
attr 4

*door2
new: simp 1 1 10407 "xdoor" 0 0 0
mvto 40294 2089
attr 4

*door3
new: simp 1 1 10408 "xdoor" 0 0 0
mvto 40630 2089
attr 4

*door4
new: simp 1 1 10409 "xdoor" 0 0 0
mvto 40980 2089
attr 4

*door5
new: simp 1 1 10410 "xdoor" 0 0 0
mvto 41674 2089
attr 4

*door6
new: simp 1 1 10411 "xdoor" 0 0 0
mvto 40240 2383
attr 4

*door7
new: simp 1 1 10412 "xdoor" 0 0 0
mvto 40589 2380
attr 4

** capillata_umbilical SCRIPTS



** capillata_umbilical SCRIPTS

** CU Push (DS)
scrp 3 1 10401 1
	mesg writ ownr 1
endm


** CU Pull (DS)
scrp 3 1 10401 2
	lock
	inst
	doif name "status" = "inactive"
** Make a Sound
		snde "1bep"
** stim to wait
		stim writ from 75 1
** Set own status
		sets name "status" "active"
** Animate Call Button
		part 0
		pose 1
** Light up Electro-Lift
		part 3
		anim [1 2 3 4 255]
** Light up Energizer
		wait 10
		part 1
		anim [1 2 3 4 5 6 7 8 255]
** Light up destination energizer
*targ game "CUdsDE"
		targ game "CUdsDE"
		mvto 39946 2379
		show 1
		plne 5005
		targ ownr
		wait 10
** Make a sound no matter what!
		snde "tele"
*** If activated by the PNTR
		doif from = pntr or from = ownr
			inst
			rnge 200
			esee 4 0 0
** Only move if alive, awake, uncarried and not held by the hand!
				doif targ <> null
					doif dead = 0 and aslp = 0 and carr = null and hhld <> targ
						mvft 39951 2479
** 						Stim with "travelled in a lift"
						stim writ targ 94 1
					endi
				endi
			next
			slow
		elif from <> pntr and from <> ownr
			inst
			targ from
			doif targ <> null
				doif dead = 0 and aslp = 0 and carr = null and hhld <> targ
					mvft 39951 2479
** 					Stim with "travelled in a lift"
					stim writ targ 94 1
				endi
			endi
			slow
			targ ownr
		endi
** Move Camera
		doif from = pntr or from = ownr
			cmrp 39970 2446 0
			targ ownr
		endi
		inst
** Turn Energizer off
		targ ownr
		part 1
		anim [0]
** Hide destination energizer
		targ game "CUdsDE"
		mvto -5000 -5000
		show 0
		plne 0
*
** Turn Spark off
		wait 5
		inst
		targ ownr
		part 3
		anim [0]
** Animate Call Button
		wait 5
		part 0
		pose 0
** Set own status
		sets name "status" "inactive"
	else
		snde "buzz"
	endi

endm

** CU Push (Banshee)
scrp 3 1 10400 1
	lock
	inst
	doif name "status" = "inactive"
** Make a Sound
		snde "1bep"
** stim to wait
		stim writ from 75 1
** Set own status
		sets name "status" "active"
** Animate Call Button
		part 0
		pose 1
** Light up Electro-Lift
		part 3
		anim [1 2 3 255]
** Light up Energizer
		wait 10
		part 1
		anim [1 2 3 4 5 6 7 8 255]
** Light up destination energizer
		targ game "CUc3DE"
		mvto 2458 3901
*		cmrp 6106 4239 0
		show 1
		plne 5005
		targ ownr
*
		wait 10
** Make a sound no matter what!
		snde "tele"
*** If activated by the PNTR
		doif from = pntr or from = ownr
			inst
			rnge 200
			esee 4 0 0
** Only move if alive, awake, uncarried and not held by the hand!
				doif targ <> null
					doif dead = 0 and aslp = 0 and carr = null and hhld <> targ
						mvft 2625 9176
** 						Stim with "travelled in a lift"
						stim writ targ 94 1
					endi
				endi
			next
			slow
		elif from <> pntr and from <> ownr
			inst
			targ from
			doif targ <> null
				doif dead = 0 and aslp = 0 and carr = null and hhld <> targ
					mvft 2625 9176
** 					Stim with "travelled in a lift"
					stim writ targ 94 1
				endi
			endi
			slow
			targ ownr
		endi
** Move Camera
		doif from = pntr or from = ownr
			meta 10 2500 8250 0
		endi
		wait 20
		inst
** Turn Energizer off
		targ ownr
		part 1
		anim [0]
** Hide destination energizer
		targ game "CUc3DE"
		mvto -5000 -5000
		show 0
		plne 0
*
** Turn Spark off
		wait 5
		inst
		targ ownr
		part 3
		anim [0]
** Animate Call Button
		wait 5
		part 0
		pose 0
** Set own status
		sets name "status" "inactive"
	else
		snde "buzz"
	endi
endm

scrp 3 8 19 1
	stim writ from 90 1
	lock
	part 0
	snde "splt"
	anim [0 1 2 3 4 5 6]
	over
	inst
	seta va16 null
	etch 4 0 0
		seta va16 targ

		chem 94 .2
	next
	targ ownr

	snde "spew"
	part 1
	frat 3
	anim [1 2 3 4 5 6 0]
	over
	part 0
	anim [7 8 9]
	over
	part 0
	anim [6 5 4 3 2 1 0]
	over
	prt: send 0 255
	inst
	doif va16 <> null
		enum 2 32 23
			doif type ov00 = 7
				doif ov00 = va16
					kill targ
				endi
			endi
		next
	endi
	slow
	targ ownr
endm

scrp 3 8 19 2001
	lock
	setv va00 _p1_
	doif va00 <> 0
		part 0
		snde "splt"
		anim [0 1 2 3 4 5 6]
		over

		seta va16 null
		inst
		etch 4 0 0
			seta va16 targ

			chem 94 .2
		next
		slow
		targ ownr

		snde "spew"
		part 1
		frat 3
		anim [1 2 3 4 5 6 0]
		over
		part 0
		anim [7 8 9]
		over
		part 0
		anim [6 5 4 3 2 1 0]
		over
		prt: send 0 255
		inst
		doif va16 <> null
			enum 2 32 23
				doif type ov00 = 7
					doif ov00 = va16
						kill targ
					endi
				endi
			next
		endi
		slow
		targ ownr
	endi
endm

scrp 3 8 19 6
	snde "dr10"
endm

scrp 3 8 19 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm

scrp 3 8 19 4
	targ from
	doif fmly = 4
		stim writ targ 91 1
	endi
endm

scrp 3 8 20 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm

scrp 3 8 20 1
	stim writ from 90 1
	mesg writ ownr 2000
endm

scrp 3 8 20 2000
	lock
	doif ov00 = 0
		snde "bep2"
		part 2
		pose 1
		part 1
		anim [0 1 2 3 4 5 6 7 8 9 10 255]
		setv ov00 1
		tick 10
	elif ov00 = 1
		snde "bep2"
		part 2
		pose 0
		part 1
		anim [0]
		setv ov00 0
		tick 0
		part 3
		pose 0
	endi
endm

scrp 3 8 20 9
	setv va00 0
	inst
	etch 4 0 0
		doif targ <> null
			addv va00 1
			doif va00 = 1
				setv va50 82
				setv va51 -1
				setv va52 -1
				loop
					doif chem va50 > va51
						setv va51 chem va50
						setv va52 va50
					endi
					addv va50 1
				untl va50 > 89
			endi
		endi
	next
	slow
	doif va00 = 1
		doif va51 <= .25 and va51 > 0.01
			part 3
			pose 1
			prt: send 0 85
		elif va51 <= .5 and va51 > .25
			part 3
			pose 2
			prt: send 0 170
		elif va51 <= 1 and va51 > .5
			part 3
			pose 3
			prt: send 0 255
		elif va51 = 0
			prt: send 0 0
		endi
	elif va00 = 0
		part 3
		pose 0
	endi
endm

scrp 3 8 20 2001
	lock
	setv va00 _p1_
	doif va00 > 0 and ov00 = 0
		unlk
		mesg writ ownr 2000
	endi
endm


scrp 3 8 20 4
	targ from
	doif fmly eq 4
		stim writ targ 91 1
	endi
endm

scrp 2 2 10410 1000
	inst
	tick 0
	doif ov00 = 0
		setv ov00 1





		snde "dor1"
		anim [1 2 3 4 5 6 7 8]
		setv va50 posx
		setv va51 posy
		setv va90 grap posx posy

		setv va92 grid ownr left

		door va90 va92 100
		link va90 va92 0
		rtar 1 1 10411
		mesg writ targ 1001
		targ ownr
		enum 1 1 10417
			tick 1
		next
		targ ownr
		over
		tick 60
	else
		rtar 1 1 10411
		mesg writ targ 1002
		targ ownr
		setv ov00 0
		snde "dor1"
		anim [8 7 6 5 4 3 2 1 0]
		setv va50 posx
		setv va51 posy
		setv va90 grap posx posy

		setv va92 grid ownr left

		door va90 va92 0
		link va90 va92 100
		over
		enum 1 1 10417
			tick 250
		next
		targ ownr







	endi

endm

scrp 2 2 10410 9
	rtar 2 12 10415
	mesg wrt+ targ 1000 ov70 0 0
endm


scrp 2 2 10410 1001
	over
	anim [1]
endm


scrp 1 1 10411 1000
	doif ov00 = 0
		sndl "alrm"
		anim [0]
		setv ov00 1
	else
		fade
		anim [1]
		setv ov00 0
	endi
endm







scrp 1 1 10412 1000
	doif ov00 = 0



		anim [6 7 8 9 10 255]
		setv ov00 1
	else
		anim [5]
		setv ov00 0
	endi
endm


scrp 2 2 10413 1000
	doif ov00 = 0
		snde "stm1"
		anim [0 2 3 4 5]
		setv va50 posx
		setv va51 posy
		setv va90 grap posx posy
		setv va91 grid ownr rght
		setv va92 grid ownr left
		inst
		door va90 va91 100
		door va90 va92 100
		link va90 va91 0
		link va90 va92 0
		slow
		setv ov00 1
	elif ov00 <> 0
		snde "stm1"
		inst
		etch 0 0 0
			doif targ <> null
				setv va55 attr
				andv va55 3
				doif va55 <> 0
					velo -30 -10
				endi
			endi
		next
		slow
		anim [5 4 3 2 0]
		setv va50 posx
		setv va51 posy
		setv va90 grap posx posy
		setv va91 grid ownr rght
		setv va92 grid ownr left
		inst
		door va90 va91 0
		door va90 va92 0
		link va90 va91 100
		link va90 va92 100
		slow
		setv ov00 0
		rtar 2 12 10415
		setv va00 ov00
		targ ownr
		doif va00 = 1
			over
			anim [1]
		endi
	endi
	over








endm








scrp 2 2 10413 1002
	over
	anim [0]
endm




scrp 2 12 10414 1
	snde "map1"
	mesg wrt+ ownr 1000 ov70 0 0
endm


scrp 2 12 10414 1000






	doif ov00 = 0 and ov70 <> 0
		setv ov00 1
		setv ov70 0
		anim [1]

		prt: send 0 255
		rtar 2 2 10413
		seta va88 targ

		targ ownr
		mesg writ va88 1000

	elif ov00 <> 0 and ov70 = 0
		setv ov00 0
		setv ov70 255
		anim [0]

		prt: send 0 0
		rtar 2 2 10413
		seta va88 targ

		targ ownr
		mesg writ va88 1000
	endi
endm


scrp 2 12 10415 1
	snde "map1"
	mesg wrt+ ownr 1000 ov70 0 0
endm

scrp 2 12 10415 1000
	inst
	part 2
	anim [3]

	doif ov00 = 0 and _p1_ <> 0 and ov01 < 0
		clac -1
		setv ov00 1
		setv ov70 0

		setv ov01 10


		doif ov00 = 1

			prt: send 0 255
			rtar 2 12 10414
			seta va88 targ
			setv va00 ov00
			clac -1
			targ ownr
			doif va00 <> 0
				mesg writ va88 1000
			endi


			rtar 1 1 10412
			seta va88 targ

			targ ownr
			mesg writ va88 1000


			rtar 1 1 10411
			seta va88 targ

			targ ownr
			mesg writ va88 1000


			rtar 2 2 10410
			seta va88 targ

			targ ownr
			mesg writ va88 1001

			rtar 2 2 10413
			seta va88 targ

			targ ownr
			mesg writ va88 1001

			tick 1
		else
			targ ownr
		endi

	elif ov00 <> 0 and _p1_ = 0 and ov01 < 0
		lock
		clac -1
		setv ov00 0
		setv ov70 255

		setv ov01 3
		prt: send 0 0
		wait 5

		rtar 2 2 10410
		seta va88 targ

		targ ownr
		mesg writ va88 1000


		unlk
		tick 1
	endi

endm


scrp 2 12 10415 9
	inst
	lock
	tick 10
	part 1
	pose ov01
	subv ov01 1

	doif ov01 < 0

		doif ov00 = 1
			tick 0
			unlk

			rtar 2 2 10410
			seta va88 targ

			targ ownr
			mesg writ va88 1000

			part 2
			anim [0]


		else
			lock
			tick 0

			rtar 1 1 10411
			seta va88 targ

			targ ownr
			mesg writ va88 1000

			rtar 1 1 10412
			seta va88 targ

			targ ownr
			mesg writ va88 1000

			rtar 2 2 10413
			seta va88 targ

			targ ownr
			mesg writ va88 1002


			rtar 2 12 10414
			seta va88 targ
			clac 0
			targ ownr

			mesg wrt+ va88 1000 0 0 0
			part 2
			anim [1]
			slow
			wait 20
			clac 0
			unlk
		endi
	endi
endm


scrp 2 12 10415 2000
endm


scrp 3 8 12 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm

scrp 3 8 12 4
	targ from
	doif fmly = 4
		stim writ targ 91 1
	endi
endm


scrp 3 8 12 1
	stim writ from 90 1
	mesg writ ownr 1064
endm

scrp 3 8 12 1064
	mesg writ pntr 107
	snde "bep2"
	part 1
	anim [2 2 2 2 0]
	doif ov01 <> 19
		addv ov01 1
	endi
	part 3
	pose ov01
	setv va90 ov01
	addv va90 1
	setv ov78 va90
	mulv va90 10
	setv ov02 va90
endm

scrp 3 8 12 1164
	mesg writ pntr 107
	snde "bep2"
	part 2
	anim [2 2 2 2 0]
	doif ov01 <> 0
		subv ov01 1
	endi
	part 3
	pose ov01
	setv va90 ov01
	addv va90 1
	setv ov78 va90
	mulv va90 10
	setv ov02 va90
endm

scrp 3 8 12 1264
	lock
	doif ov70 < ov78
		setv ov75 _p1_
		addv ov70 1
		doif ov70 >= ov78
			gsub send
		endi
	elif ov70 >= ov78
		gsub send
	endi
	subr send


		setv ov70 0

		prt: send 0 ov75
	retn
	unlk
endm

scrp 3 8 1 1
	stim writ from 90 1

	mesg writ ownr 2000



endm

scrp 3 8 1 2

	mesg writ ownr 2001

endm



scrp 3 8 1 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm


scrp 3 8 1 4
	targ from
	doif fmly eq 4
		stim writ targ 91 1
	endi
endm


scrp 3 8 1 9
	part 1
	setv va00 ov00
	addv va00 3
	doif ov00 eq 3
		setv ov00 0
	endi
	doif ov00 eq 0
		anim [3]
		setv va88 3
	endi
	doif ov00 eq 1
		anim [4]
		setv va88 2
	endi
	doif ov00 eq 2
		anim [5]
		setv va88 1
	endi
	setv va66 0
	inst
	esee 4 va88 0
		doif targ <> null
			doif dead = 0
				setv va66 1
				setv va80 relx ownr targ
				addv va80 0.0
				targ ownr
				snde "radr"
				doif va80 <> 0
					setv va90 va80

					setv va81 ov90
					divv va81 va90
					setv va82 255
					divv va82 va81
				else
					setv va82 1
				endi

				prt: send 0 va82
				part 1
				doif ov00 eq 3
					setv ov00 0
				endi
				doif ov00 eq 0
					anim [0 2 3]
				endi
				doif ov00 eq 1
					anim [0 2 4]
				endi
				doif ov00 eq 2
					anim [2 5]
				endi
			endi
		endi
	next
	doif va66 = 0
		prt: send 0 0
	endi
endm

scrp 3 8 1 1000
	part 0
	setv ov02 _p1_
	doif ov01 = 0
		doif _p1_ <> 0
			mesg writ ownr 2000
		endi
	else
		doif _p1_ = 0
			mesg writ ownr 2000
		endi
	endi
endm

scrp 3 8 1 2000
	lock
	doif ov01 = 0
		setv ov01 1
		part 2
		anim [1]
		snde "beep"
		part 0
		anim [0 0 0 0 1 1 1 1 2 2 2 3 3 4 4 5 6 7]
		over
		anim [0 1 2 3 4 5 6 7 255]

		part 1
		anim [0 1 2 255]
		tick 5
		part 2
		anim [1]
	else
		setv ov01 0
		part 2
		anim [1]
		snde "beep"
		part 0
		anim [0 1 2 3 3 4 4 5 5 5 6 6 6 6 7 7 7 7]
		over

		part 1
		anim [0]
		tick 0
		part 2
		anim [0]
		part 3
		anim [0]
	endi
endm

scrp 3 8 1 2002
	doif ov01 = 1
		part 3
		anim [1]
		part 1
		snde "beep"
		addv ov00 1
		doif ov00 eq 3
			setv ov00 0
		endi
		doif ov00 eq 0
			anim [3]
		endi
		doif ov00 eq 1
			anim [4]
		endi
		doif ov00 eq 2
			anim [5]
		endi
		part 3
		over
		anim [0]
	endi
endm

scrp 3 8 13 1000
	lock
	doif ov00 = 1
		doif ov01 > 1
			part 1
			pose 2
			subv ov01 1
			snde "bep2"
		else
			snde "excl"
		endi

		part 3
		pose ov01
		part 1
		pose 0
	else
		snde "excl"
	endi
endm

scrp 3 8 13 1001
	lock
	doif ov00 = 1
		doif ov01 < 20
			part 2
			pose 2
			addv ov01 1
			snde "bep2"
		else
			snde "excl"
		endi

		part 3
		pose ov01
		part 2
		pose 0
	else
		snde "excl"
	endi
endm

scrp 3 8 13 1002
	lock
	snde "bep2"
	doif ov00 = 0
		part 4
		pose 33
		setv ov00 1
		part 0
		anim [27]
		setv ov01 1
		part 3
		pose ov01
	elif ov00 = 1
		setv ov00 0

		part 3
		pose 33

		part 4
		frat 2
		anim [33 28 29 30 31 32 33 32 31 30 29 255]

		part 0
		frat 1
		anim [25 25 25 26 26 27 26 26 255]

		setv ov02 0
	endi
endm

scrp 3 8 13 1003
	lock
	setv va00 _p1_
	doif ov00 = 1
		doif va00 <> 0
			part 1
			pose 2
			part 2
			pose 2

			setv va01 ov01
			setv va02 ov01
			wait 10
			reps va01
				subv va02 1
				snde "spdn"
				doif va02 > 0
					part 3
					pose va02
					wait 10
				elif va02 = 0
					part 3
					pose ov01
				endi
			repe
			snde "spup"
			part 3
			pose ov01
			prt: send 0 va00
			part 1
			pose 0
			part 2
			pose 0
		endi
	endi
endm

scrp 3 8 13 1
	lock
	inst
	stim writ from 90 1
	doif ov02 = 0 and ov01 <> 20
		mesg writ ownr 1000
	elif ov02 = 1 and ov01 <> 1
		mesg writ ownr 1001
	elif ov02 = 0 and ov01 = 20
		setv ov02 1
		mesg writ ownr 1000
	elif ov02 = 1 and ov01 = 1
		setv ov02 0
		mesg writ ownr 1001
	endi
endm

scrp 3 8 13 2
	lock
	inst
	stim writ from 90 1
	doif ov02 = 0 and ov01 <> 20
		mesg writ ownr 1000
	elif ov02 = 1 and ov01 <> 1
		mesg writ ownr 1001
	elif ov02 = 0 and ov01 = 20
		setv ov02 1
		mesg writ ownr 1000
	elif ov02 = 1 and ov01 = 1
		setv ov02 0
		mesg writ ownr 1001
	endi
endm

scrp 3 8 13 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm

scrp 3 8 13 4
	targ from
	doif fmly = 4
		stim writ targ 91 1
	endi
endm

scrp 3 8 13 6
	snde "dr10"
endm




scrp 3 8 11 1000
	anim [0]
	setv ov70 _p1_
	setv ov71 ov70
	absv ov71
	over
	prt: send 0 ov70
	doif ov71 > 0 and ov71 <= 85
		anim [1 0 1 0 1 0 1 0 1 0]
		prt: send 0 ov70
		tick 20

	endi
	doif ov71 > 85 and ov71 <= 170
		anim [2 0 2 0 2 0 2 0 2 0]
		prt: send 0 ov70
		tick 20

	endi
	doif ov71 > 170 and ov71 <= 255
		anim [3 0 3 0 3 0 3 0 3 0]
		prt: send 0 ov70
		tick 20

	endi
	doif ov71 < 0 and ov71 >= -85
		anim [1 0 1 0 1 0 1 0 1 0]
		prt: send 0 ov70
		tick 20

	endi
	doif ov71 < -85 and ov71 >= -170
		anim [2 0 2 0 2 0 2 0 2 0]
		prt: send 0 ov70
		tick 20

	endi
	doif ov71 < -170 and ov71 >= -255
		anim [3 0 3 0 3 0 3 0 3 0]
		prt: send 0 ov70
		tick 20

	endi

	doif ov71 = 0
		mesg writ ownr 2000
	endi


endm


scrp 3 8 11 4
	targ from
	doif fmly eq 4
		stim writ targ 91 1
	endi
	targ ownr
	tick 0
	seta va04 targ
	inst
	enum 3 8 11
		doif ov01 = va04 and targ <> ownr
			tick 1
		endi
	next
	slow

endm

scrp 3 8 11 2000
	anim [0]
	tick 0
	clac 0
	prt: send 0 0

endm


scrp 3 8 11 3
	sndc "hit_"
	prt: bang rand 60 100
	stim writ from 92 1
endm














scrp 3 8 11 5
	etch 3 8 11
		addv va00 1
	next
	doif va00 <= 1
		tick 1
	endi
	accg 4
endm


scrp 3 8 11 1
	snde "lg_1"
	stim writ from 90 1
	doif ov00 = 0
		setv ov00 4
	elif ov00 = 4
		setv ov00 8
	elif ov00 = 8
		setv ov00 0
	elif ov00 <> 0 and ov00 <> 4 and ov00 <> 8
		setv ov00 8
	endi
	anim []
	base ov00
	anim [0]







endm

scrp 3 8 11 9
	doif ov01 <> null
		targ ov01
		setv va50 posx
		setv va51 posy
		targ ownr

	endi
	inst
	seta va03 null
	seta va88 null
	etch 3 8 11
		doif targ <> ownr and carr = null
			setv va01 rely ownr targ
			doif va01 > 0
				setv va00 1
				setv va02 post
				seta va88 targ
			endi
		endi
	next
	seta ov01 va88

	doif va00 = 0
		seta ov01 null
	endi

	doif va00 = 1
		gsub stak
	endi

	doif obst 3 gt 0
		gsub fall
	endi
	doif obst 3 = 0
		tick 0
	endi

	subr stak
		accg 0
		subv va02 30
		velo 0 0
		doif tmvt posl va02 <> 1
			mvsf posl va02
		else
			mvto posl va02
		endi
		tick 0
		stop
	retn

	subr fall
		inst
		seta va04 targ
		enum 3 8 11
			doif ov01 = va04
				tick 1
			endi
		next
		accg 4
		stop
	retn
	slow
endm

scrp 3 8 6 1


	sndc "lg_1"
	inst
	stim writ from 90 1
	doif ov00 lt 0
		part 4
		pose 0
	else
		part 4
		pose 1
	endi
	negv ov00
endm

scrp 3 8 6 1000



	setv ov01 _p1_
	part 1
	pose 1

	doif ov02 ne 999 or ov00 = -1
		mesg wrt+ ownr 1002 0 0 0
	else
		wait 40
		inst
		part 1
		pose 0
		setv ov01 999
	endi
endm

scrp 3 8 6 1001

	setv ov02 _p1_
	part 2
	pose 1
	doif ov01 ne 999 or ov00 = -1
		mesg wrt+ ownr 1002 0 0 0
	else
		wait 40
		inst
		part 2
		pose 0
		setv ov02 999
	endi
endm

scrp 3 8 6 1002
	snde "lg_o"
	part 3
	anim [0 1 0 1 0 1 0 1 0]
	inst
	setv va00 ov01
	setv va01 ov02

	setv va98 0
	setv va99 0


	doif ov00 eq -1
		doif va00 ne 0 and va00 ne 999
			setv va98 1
		endi
		doif va01 ne 0 and va01 ne 999
			setv va99 1
		endi
		doif va98 eq 1 or va99 eq 1
			prt: send 0 255
		endi

		doif va00 eq 0 and va01 eq 0
			prt: send 0 0
		endi
	endi


	doif ov00 eq 1
		doif va00 ne 0 and va00 ne 99
			setv va98 1
		endi
		doif va01 ne 0 and va01 ne 999
			setv va99 1
		endi
		doif va98 eq 1 and va99 eq 1
			prt: send 0 255
		endi


		doif va00 eq 0 and va01 eq 0
			prt: send 0 0
		endi
	endi
	inst
	setv ov01 999
	part 1
	pose 0
	setv ov02 999
	part 2
	pose 0
endm


scrp 3 8 6 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm


scrp 3 8 6 4
	targ from
	doif fmly eq 4
		stim writ targ 91 1
	endi
endm

scrp 3 8 10 1
	snde "beep"
	stim writ from 90 1
	doif ov00 = 0
		mesg writ targ 2000
	endi
endm


scrp 3 8 10 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm

scrp 3 8 10 2
	doif ov00 = 1
		mesg writ targ 2000
	endi
endm


scrp 3 8 10 4
	targ from
	doif fmly = 4
		stim writ targ 91 1
	endi
endm



scrp 3 8 10 9
	setv va88 0
	inst
	setv va88 0
	setv va89 0
	etch 4 0 0
		setv va00 chem 34
		setv va88 1

		doif chem 66 > 0.1 or chem 67 > 0.1 or chem 68 > 0.1 or chem 69 > 0.1 or chem 70 > 0.1 or chem 75 > 0.1 or chem 78 > 0.1 or chem 82 > 0.15 or chem 83 > 0.15 or chem 84 > 0.15 or chem 85 > 0.15 or chem 86 > 0.15 or chem 87 > 0.15 or chem 88 > 0.15 or chem 89 > 0.15 or chem 30 < 0.5
			setv va89 1
		endi
	next
	doif va88 = 1
		doif va00 > .6
			setv va00 .6
		endi
		setv ov90 va00
		setv ov91 va00
		mulv ov90 23
		mulv ov91 425
		part 1
		setv ov90 ftoi ov90
		pose ov90
		doif va89 = 1
			snde "epng"
			sets va99 vtos ov90
			adds va99 " 0 255"
			anms va99
		endi
		setv va66 pose
		part 3
		doif va66 < 7 and va66 > 3
			anim [1]
		elif va66 <= 3
			anim [0 1 255]
		else
			anim [0]
		endi
		part 4
		doif va66 > 10
			anim [1]
		else
			anim [0]
		endi
		prt: send 0 ov91
	else
		part 1
		anim [0]
		part 3
		anim [0]
		part 4
		anim [0]
	endi
endm

scrp 3 8 10 1000
	snde "beep"
	part 0
	setv ov02 _p1_
	doif ov00 = 0
		doif _p1_ <> 0
			mesg writ ownr 2000
		endi
	else
		doif _p1_ = 0
			mesg writ ownr 2000
		endi
	endi
endm

scrp 3 8 10 2000
	snde "beep"
	doif ov00 = 0
		setv ov00 1
		part 2
		anim [0 1 255]
		tick 10
	else
		part 1
		anim [0]
		part 2
		anim [0]
		part 3
		anim [0]
		part 4
		anim [0]
		tick 0
		setv ov00 0
	endi

endm

scrp 2 14 4 9

















	addv ov01 1

	doif rtyp room targ eq 8 or rtyp room targ eq 9
		setv vely -5
		stop
	endi

	setv va00 0
	setv va01 0


	doif prop room targ 5 gt 0.2
		setv vely -10
		stop
	endi


*	doif ov01 ge 100
*		doif totl 2 14 4 lt 20
*			rnge 1000
*			setv va99 0
*			esee 2 14 4
*				addv va99 1
*			next
*
*			doif va99 le 3
*				setv va98 totl 2 18 20
*
*				doif va98 lt 3
*
*					inst
*					setv va90 posl
*					setv va91 post
*					new: simp 2 18 20 "blnk" 1 0 0
*					doif tmvt va90 va91 <> 1
*						kill targ
*						stop
*					endi
*					attr 16
*					tick 3600
*					mvto va90 va91
*				endi
*			endi
*		endi
*	endi
*	targ ownr





	doif ov00 eq 0

		setv ov14 5
		setv ov15 5

		subv ov90 1

		gsub wall

		doif ov90 le 0

			doif va00 ne 1
				doif rand 0 2 eq 0

					negv ov10
				endi
				addv ov90 rand 1 3
			endi

			doif va01 ne 1


				negv ov11

				addv ov90 rand 2 5
			endi
		endi

		gsub velo
		gsub anim


		doif ov91 le 0
			gsub hunt

		else
			subv ov91 1
		endi

	endi


	doif ov00 eq 1
		gsub hunt
		doif posx lt ov70 and ov10 lt 0
			setv ov10 1
		endi
		doif posx gt ov70 and ov10 gt 0
			setv ov10 -1
		endi
		doif posy lt ov71 and ov11 lt 0
			setv ov11 1
		endi
		doif posy gt ov71 and ov11 gt 0
			setv ov11 -1
		endi
		setv ov14 4
		setv ov15 4

		gsub velo
		gsub wall
		gsub anim
	endi







	subr hunt
		rnge 200
		setv va99 0
		esee 2 1 1
			setv va99 1
			setv va00 posx
			setv va01 posy
			targ ownr
			setv ov00 1
			setv ov70 va00
			setv ov71 va01
		next
		doif va99 eq 0
			setv ov00 0
		endi
	retn



	subr velo
		doif ov10 lt 0

			negv ov14
			doif ov12 gt ov14
				subv ov12 2
			endi
			negv ov14
		else

			doif ov12 lt ov14
				addv ov12 2
			endi
		endi

		doif ov11 lt 0

			negv ov15
			doif ov13 gt ov15
				subv ov13 2
			endi
			negv ov15
		else

			doif ov13 lt ov15
				addv ov13 2
			endi
		endi

		setv velx ov12
		setv vely ov13
	retn


	subr wall

		doif obst 0 lt 100 and ov10 lt 0
			negv ov10
			setv va00 1
		endi

		doif obst 1 lt 100 and ov10 gt 0
			negv ov10
			setv va00 1
		endi

		doif obst 2 lt 50 and ov11 lt 0
			negv ov11
			setv va01 1
		endi

		doif obst 3 lt 100 and ov11 gt 0
			negv ov11
			setv va01 1
		endi
	retn


	subr anim

		doif ov12 gt 0
			anim [2 3 255]
		elif ov12 lt 0
			anim [8 9 255]
		endi
	retn

endm

* scrp 2 14 4 1
*	setv vely -20
*	targ from
*	doif fmly eq 4
*		stim writ targ 88 1
*	endi
* endm

* scrp 2 14 4 4
*	targ from
*	doif fmly eq 4
*		stim writ targ 88 1
*	endi
*	mesg writ targ 5
* endm

* scrp 2 14 4 12
* 	targ from
*	doif fmly eq 4
*		stim writ targ 88 1
*	endi
*	kill ownr
* endm


scrp 2 18 20 9
	inst
	setv va00 posl
	setv va01 post
	rnge 700
	setv va66 0
	esee 2 14 5
		addv va66 1
	next
	doif va66 < 20

*		new: simp 2 14 4 "mossie" 24 0 300
*		attr 66
*		doif tmvt va00 va01 <> 1
*			kill targ
*			stop
*		endi
*
*		bhvr 49
*		tick 5
*
*		setv ov61 40
*
*		mvto va00 va01
*		setv ov10 rand 0 1
*		doif ov10 eq 0
*			setv ov10 -1
*		endi
*		setv ov11 rand 0 1
*		doif ov11 eq 0
*			setv ov11 -1
*		endi
	endi
endm


***********************************************************



scrp 3 8 7 4
	targ from
	doif fmly eq 4
		stim writ targ 91 1
	endi
endm



scrp 3 8 7 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm


scrp 3 8 7 1000
	part 1
	anim [0 1 0 1 0 1 0]
	doif _p1_ eq 0
		setv va00 255
	else
		setv va00 0
	endi

	prt: send 0 va00

endm

scrp 3 8 7 1
	stim writ from 90 1
	mesg wrt+ ownr 1000 255 0 0
endm

scrp 3 8 18 1
	lock
	snde "bep2"
	part 0
	anim [0 1 255]
	sets va01 vtos ov71
	adds va01 vtos ov72
	adds va01 vtos ov73
	setv va02 stoi va01
	prt: send 0 va02
	snde "bep2"
	wait 1
	snde "bep2"
	wait 1
	snde "bep2"
	wait 4
	part 0
	anim [0]
endm
scrp 3 8 18 2001
	snde "bep2"
	lock
	addv ov71 1
	doif ov71 = 3
		setv ov71 0
	endi
	unlk
	mesg writ ownr 2004
endm
scrp 3 8 18 2002
	snde "bep2"
	lock
	addv ov72 1
	doif ov71 < 2 and ov72 = 10
		setv ov72 0
	elif ov71 = 2 and ov72 = 6
		setv ov72 0
	endi
	unlk
	mesg writ ownr 2004
endm
scrp 3 8 18 2003
	snde "bep2"
	lock
	addv ov73 1
	doif ov71 < 2 and ov73 = 10
		setv ov73 0
	elif ov71 = 2 and ov72 <> 5 and ov73 = 10
		setv ov73 0
	elif ov71 = 2 and ov72 = 5 and ov73 = 6
		setv ov73 0
	endi
	unlk
	mesg writ ownr 2004
endm
scrp 3 8 18 2004
	lock
	part 1
	frmt 4 4 0 0 0 0 2
	sets va01 vtos ov71
	ptxt va01
	part 2
	frmt 4 4 0 0 0 0 2
	sets va02 vtos ov72
	ptxt va02
	part 3
	frmt 1 4 0 0 0 0 2
	sets va03 vtos ov73
	ptxt va03
endm
scrp 3 8 18 2005
	lock
	setv va00 _p1_
	doif va00 > 0
		snde "bep2"
		part 0
		anim [0 1 255]
		sets va01 vtos ov71
		adds va01 vtos ov72
		adds va01 vtos ov73
		setv va02 stoi va01
		prt: send 0 va02
		snde "bep2"
		wait 1
		snde "bep2"
		wait 1
		snde "bep2"
		wait 4
		part 0
		anim [0]
	endi
endm

scrp 3 8 18 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm

scrp 3 8 18 4
	targ from
	doif fmly = 4
		stim writ targ 91 1
	endi
endm

scrp 3 3 14 4
	targ from
	doif fmly eq 4
		stim writ targ 91 1
	endi
endm


scrp 3 3 14 1
	snde "pl_2"
	stim writ from 68 1
	part 0
	anim [0 1 0 1 0 1 0 1 0 1 0]
	prt: send 0 255

endm

scrp 3 3 14 2
	snde "pl_1"
	part 0
	anim [0 2 0 2 0 2 0 2 0 2 0]
	prt: send 0 -255
endm


scrp 3 3 14 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm

scrp 3 3 14 1000
	doif _p1_ lt 0
		prt: send 0 255
	elif _p1_ gt 0
		prt: send 0 -255
	endi
endm

scrp 3 8 17 1
	stim writ from 90 1
	lock
	doif ov00 = 0
		snde "pi_1"
		anim [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
		over
		tick 1
		setv ov00 1
	elif ov00 = 1
		snde "pi_1"
		anim [19 20 21 22 23 24 25 26 0]
		over
		setv ov00 0
		doif ov16 <> null
			targ ov16
			kill targ
			targ ownr
		endi
		tick 0
	endi
endm
scrp 3 8 17 9
	setv va00 0
	setv va50 0
	seta va16 null
	inst
	etch 4 0 0
		doif targ <> null
			addv va00 1
			doif va00 = 1
				seta va16 targ

			endi
		endi
	next
	slow
	targ ownr
	doif ov17 <> va16 and ov16 <> null
		targ ov16
		kill targ
	endi
	targ ownr
	seta ov17 va16
	doif va00 = 1 and ov16 = null
		inst
		doif va16 <> null
			targ va16
			setv va49 loci 1 1 2 1
			setv va50 chem 48
			targ ownr
			inst
			new: simp 1 1 116 "pregnancy_indication_device" 11 27 1000
			attr 48
			frel va16
			seta va16 targ
			anim [0 1 2 3 4 5 6 7 8 9 255]
			flto -5 -5
			slow
			targ ownr
			seta ov16 va16
			doif va49 = 1
				doif va50 > 0.01 and va50 <= .33
					pose 16
				elif va50 > .33 and va50 <= .66
					pose 17
				elif va50 > .66 and va50 <= 1
					pose 18
				endi
			endi
			prt: send 0 va50
		endi
		slow
	elif va00 = 1 and ov16 <> null
		inst
		doif va16 <> null
			targ va16
			setv va49 loci 1 1 2 1
			setv va50 chem 48
			targ ownr
			doif va49 = 1
				doif va50 > 0.01 and va50 <= .33
					pose 16
				elif va50 > .33 and va50 <= .66
					pose 17
				elif va50 > .66 and va50 <= 1
					pose 18
				endi
			endi
			prt: send 0 va50
		endi
		slow
	elif va00 = 0
		doif ov16 <> null
			targ ov16
			kill targ
			targ ownr
			seta ov16 null
			pose 15
		endi
	endi
endm
scrp 3 8 17 2000
	setv va00 _p1_
	doif va00 > 0 and ov00 = 0
		doif ov00 = 0
			snde "pi_1"
			anim [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
			over
			tick 1
			setv ov00 1
		endi
	endi
endm

scrp 3 8 17 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm

scrp 3 8 17 4
	targ from
	doif fmly = 4
		stim writ targ 91 1
	endi
endm

scrp 3 8 8 1
	stim writ from 90 1
	doif ov00 = 0
		mesg wrt+ ownr 1000 255 0 0
	else
		mesg writ ownr 2000
	endi
endm
scrp 3 8 8 2
	doif ov00 = 0
		mesg wrt+ ownr 1000 255 0 0
	else
		mesg writ ownr 2000
	endi
endm


scrp 3 8 8 4
	targ from
	doif fmly eq 4
		stim writ targ 91 1
	endi
endm



scrp 3 8 8 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm


scrp 3 8 8 1000
	setv ov70 _p1_
	setv ov71 ov70
	absv ov71
	doif ov71 <> 0
		doif ov00 = 0
			setv ov00 1
			anim [0 1 2]
			over
		endi
		snde "sirn"

		esee 4 0 0
			aslp 0
		next
		targ ownr
		anim [3 4 5 6 7 8 9 10 11 12 13 14 15]
		over
		anim [16 17 0]
		over
		clac 1
		setv ov00 0
		prt: send 0 ov70
	endi
	doif ov71 = 0
		mesg writ ownr 2000
	endi


endm


scrp 3 8 8 2000
	anim [16 17 0]
	over
	setv ov00 0
	clac 0
	prt: send 0 0
endm

scrp 3 8 2 1000
	lock
	clac 0
	prt: send 0 _p1_

	doif _p1_ lt 0 and ov10 gt 0
		gsub left
	elif _p1_ gt 0 and ov10 lt 0
		gsub rite
	elif _p1_ eq 0
		stop
	endi



	setv va09 _p1_
	divv va09 9

	gsub fire


	subr left
		sndl "sgtn"
		anim [10 11 12 13 14 15 16 17 18 19 0]
		setv ov10 -1
		over
		fade
	retn

	subr rite
		sndl "sgtn"
		anim [0 1 2 3 4 5 6 7 8 9 10]
		setv ov10 1
		over
		fade
	retn

	subr fire
		doif carr eq game "c3_inventory"
			stop
		endi
		snde "sgfr"
		setv va80 plne
		subv va80 1
		doif ov10 lt 0

			anim [20 21 22 23 24]
			setv va00 posl

			setv va01 posy
			subv va01 30



			inst
			new: simp 2 10 25 "sludgegun" 24 30 va80
			attr 195
			accg 1
			elas 20
			perm 60
			tick 1


			setv ov61 10

			velo va09 -5
			anim [0 1 2 3 4 5 6 7 255]
			doif tmvt va00 va01 eq 1
				mvto va00 va01
			else
				kill targ
			endi
			slow
		else

			anim [25 26 27 28 29]
			setv va00 posr
			subv va00 40
			setv va01 posy
			subv va01 30



			inst
			new: simp 2 10 25 "sludgegun" 24 30 va80
			attr 195
			accg 1
			elas 20
			perm 60
			tick 1

			setv ov61 10

			velo va09 -5
			anim [8 9 10 11 12 13 14 15 255]
			doif tmvt va00 va01 eq 1
				mvto va00 va01
			else
				kill targ
			endi
			slow
		endi
	retn



	unlk
endm




scrp 3 8 2 1
	lock
	inst
	clac -1

	doif from eq pntr

		doif _p2_ lt 40
			doif ov10 gt 0
				setv va00 200
			else
				setv va00 -200
			endi

		else
			doif ov10 gt 0
				setv va00 -200
			else
				setv va00 200
			endi
		endi
	else
		doif ov10 gt 0
			setv va00 200
		else
			setv va00 -200
		endi
		stim writ from 67 1
	endi
	mesg wrt+ ownr 1000 va00 0 0
endm


scrp 3 8 2 2
	lock
	inst
	clac -1
	doif ov10 gt 0
		setv va00 -200
	else
		setv va00 200
	endi
	driv 11 -0.1
	driv 8 0.1
	mesg wrt+ ownr 1000 va00 0 0
endm


scrp 2 10 25 6
	lock
	attr 0
	snde "splt"
	anim [16 17 18 19 20 21 22 23]
	over
	kill targ
endm

scrp 2 10 25 9
	lock
	setv va00 0
	etch 4 0 0
		stim writ targ 25 0

		aslp 0
		targ ownr
		attr 128
		velo 0 0
		anim [16 17 18 19 20 21 22 23]
		over
		kill targ
	next

endm

scrp 3 8 2 3
	sndc "hit_"
	velo 0 rand -5 -10
	prt: bang rand 60 100
	stim writ from 92 1
endm


scrp 3 8 2 4
	targ from
	doif fmly = 4
		stim writ targ 91 1
	endi
endm

scrp 2 23 1 1
	seta ov16 from
	mesg writ ownr 6463
endm
scrp 2 23 1 6464
	lock
	setv va00 _p1_
	doif va00 <> 0
		unlk
		mesg writ ownr 6463
	endi
endm
scrp 2 23 1 6463
	lock
	doif ov62 > 0
		subv ov62 1
		part 1
		pose ov62
		part 0
		snde "copn"
		snde "che1"
*	frat 2.5
		part 0
		anim [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22]
		over
		snde "dr10"
		anim [23 24 25]
		over
		setv va00 posx
		setv va01 posy
		addv va00 27
		addv va01 27
		inst
		new: simp 2 11 2 "infinite_cheese_machine" 2 44 8000
		attr 195
		bhvr 48
		perm 64
		elas 40
		accg 10
		aero 5
		fric 20
		emit 8 0.35
		setv ov61 30
		doif tmvt va00 va01 = 1
			mvto va00 va01
		else
			mvsf va00 va01
		endi
*	snde "dr10"
		slow
		targ ownr
		prt: send 0 255
		snde "che2"
*	frat 2.5
		anim [26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43]
		over
		snde "ccls"
		pose 0
	elif ov62 <= 0
		setv ov62 0
		snde "excl"
		inst
		doif ov16 <> null
			targ ov16
			stim writ targ 0 1
			seta ov16 null
		endi
		slow
		targ ownr
	endi
endm
** Cheese Eat Script
scrp 2 11 2 12
	doif ov00 = 0
		snde "chwp"
		stim writ from 79 1
		targ ownr
		pose 1
		setv ov00 1
	elif ov00 = 1
		snde "chwp"
		stim writ from 79 1
		targ ownr
		kill ownr
	endi
endm
** Cheese Collision Script
scrp 2 11 2 6
	doif wall = down
		snde "dr10"
	endi
endm

** Cheese Machine Timer
scrp 2 23 1 9
	setv va00 totl 2 11 2
	setv va01 game "Bioenergy"
	doif va00 <= 100 and va01 >= 30 and ov62 < 4
		subv game "Bioenergy" 30
		part 2
		anim [0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]
		addv ov62 1
		part 1
		pose ov62
	endi
endm
** Hit Script
scrp 2 23 1 3
	sndc "hit_"
	velo 0 rand -20 -30
	prt: bang rand 60 100
	stim writ from 92 1
endm

scrp 2 12 2 1
	inst
	lock
	seta va88 ov16
	enum 2 12 2
		doif ov16 = va88
			addv va66 ov00
			addv va66 pose
		endi
	next
	targ ov16
	addv va66 ov00
	setv va51 posy
	setv va52 posy
	targ ownr
	addv va51 20
	subv va52 20
	doif va66 = 0

		doif posy > va51 or posy < va52
			prt: send 0 0
			enum 2 12 2
				doif ov16 = va88
					pose 0
					setv ov00 0
				endi
			next
			snde "but1"
			pose 1
			setv ov00 1
			inst
			mesg wrt+ ov16 1500 unid 0 0
			slow
		else
			anim [1]
			over
			anim [0]
			over
		endi
	endi
endm

scrp 2 12 2 1000
	inst
	setv ov70 _p1_
	setv ov71 ov70
	absv ov71
	seta va16 ov16
	enum 2 12 2
		doif ov16 = va16
			doif pose = 1 or ov00 = 1
				setv va67 1
			endi
		endi
	next
	doif ov71 > 0
		doif va67 = 0
			mesg writ ownr 0
		endi
	endi
	doif ov71 = 0
		pose 0
		setv ov00 0
	endi
endm


scrp 2 12 2 1501
	inst
	lock
	base 0
	doif ov00 = 1
		prt: send 0 255
	endi
	anim [0]
	setv ov00 0
endm

scrp 3 1 1 1
	inst
	seta va99 null
	targ from
	doif fmly eq 4

		stim writ targ 75 0
		seta va99 targ
	endi
	targ ownr
	seta ov99 va99

	mesg writ ownr 2000
endm

scrp 3 1 1 2
	inst
	seta va99 null
	targ from
	doif fmly eq 4

		stim writ targ 75 0
		seta va99 targ
	endi
	targ ownr
	seta ov99 va99
	mesg writ ownr 2001
endm



scrp 3 1 1 1500
	inst
	lock
	doif ov00 eq 0
		setv ov00 1
		inst
		setv ov70 _p1_




		snde "clik"
		tick 1
		slow
	endi

endm

scrp 3 1 1 9
	lock
	setv va17 ov70
	inst
	doif ov80 = 0
		etch 4 2 0
			inst
			doif targ <> null
				nohh
				zomb 1
				pose 80
				dirn 1
				wait 4
				inst
				doif targ <> null
					spas ownr targ
				endi
				wait 2
				inst
				doif targ <> null
					doif carr = null
						zomb 0
					endi
				endi









			endi
		next
		inst
		gpas 4 0 0 1


















		inst
		part 1
		anim [7 6 5 4 3 2 1 0]
		over
		setv ov80 1
	endi
	enum 2 12 2
		doif ov16 = ownr
			doif unid = va17
				seta va16 targ
				targ ownr
				seta ov16 va16
				setv va02 rely ownr ov16
				subv va02 20
				setv va03 va02
				absv va03
				doif va03 > 200
					setv va04 10
					tick 6
				elif va03 > 100 and va03 <= 200
					setv va04 8
					tick 4
				elif va03 > 50 and va03 <= 100
					setv va04 5
					tick 2
				elif va03 > 10 and va03 <= 50
					setv va04 3
					tick 1
				elif va03 <= 10
					setv va04 1
					tick 1
				endi
			endi
		endi
	next
	doif va02 < 0
		absv va04
		negv va04
		part 0
		anim [3]
		bhvr 0
		part 2
		anim [6]
		part 3
		anim [6]
		velo 0 va04
	elif va02 > 0
		absv va04
		part 0
		anim [2]
		bhvr 0
		part 2
		anim [6]
		part 3
		anim [6]
		velo 0 va04
	elif va02 = 0
		velo 0 0
		tick 0
		setv ov80 0
		part 1
		anim [0 1 2 3 4 5 6 7]
		over


		inst
		epas 4 0 0
			doif targ <> null
				zomb 0
			endi
		next
		dpas 4 0 0


		inst

		doif ov99 ne null
			targ ov99
			doif fmly eq 4

				stim writ targ 94 1
			endi
			targ ownr
			seta ov99 null
		endi



		setv ov00 0
		part 0
		anim [0]

		enum 2 12 2
			doif ov16 = ownr
				mesg writ targ 1501
				targ ownr
				unlk
			endi
		next
		unlk
		snde "ding"
		part 2
		anim [4]
		part 3
		anim [5]
		bhvr 3
	endi
endm

scrp 3 1 1 2000
	inst
	doif from = pntr
		targ pntr
		anim [1 0]
		targ ownr
	endi


	part 2
	anim [6]
	part 3
	anim [6]
	addv va66 ov00
	enum 2 12 2
		addv va66 ov00
	next
	targ ownr
	slow
	doif va66 = 0
		setv va00 unid
		seta va16 null
		setv va88 999999
		enum 2 12 2
			doif ov16 = ownr
				setv va50 rely ownr targ
				doif va50 < 0
					setv va51 va50
					absv va51
					doif va51 < va88 and va51 > 10
						setv va88 va51
						seta va16 targ
					endi
				endi
			endi
		next
		doif va16 = null
		endi
		doif va16 <> null
			part 0
			anim [3]
			mesg writ va16 0
		endi

	else
		part 2
		anim [4]
		part 3
		anim [5]
	endi

endm


scrp 3 1 1 2001
	inst
	doif from = pntr
		targ pntr
		anim [1 1 1 0]
		targ ownr
	endi


	part 2
	anim [6]
	part 3
	anim [6]
	snde "clik"
	addv va66 ov00
	enum 2 12 2
		doif ov16 = ownr
			addv va66 ov00
		endi
	next
	targ ownr
	slow
	doif va66 = 0

		setv va00 unid
		seta va16 null
		setv va88 999999
		enum 2 12 2
			doif ov16 = ownr
				setv va50 rely ownr targ
				doif va50 > 0
					setv va51 va50
					absv va51
					doif va51 < va88 and va51 > 20
						setv va88 va51
						seta va16 targ
					endi
				endi
			endi
		next
		doif va16 = null
		endi
		doif va16 <> null
			part 0
			anim [2]
			mesg writ va16 0
		endi
	else
		part 2
		anim [4]
		part 3
		anim [5]
	endi

endm



scrp 2 12 2 3
	sndc "hit_"
	prt: bang rand 60 100
	stim writ from 92 1
endm

scrp 1 1 10406 1
	sndc "no__"
endm

scrp 1 1 10407 1
	sndc "no__"
endm

scrp 1 1 10408 1
	sndc "no__"
endm

scrp 1 1 10409 1
	sndc "no__"
endm

scrp 1 1 10410 1
	sndc "no__"
endm

scrp 1 1 10411 1
	sndc "no__"
endm

scrp 1 1 10412 1
	sndc "no__"
endm



rscr
** Kill the C3 Side
enum 3 1 10401
	kill targ
next

** Kill the DS Side
enum 3 1 10400
	kill targ
next

** Kill any Destination Energizers
enum 1 1 192
	kill targ
next

enum 3 8 19
	kill targ
next

enum 3 8 20
	kill targ
next

enum 1 1 10416
	kill targ
next

enum 2 12 10414
	kill targ
next

enum 2 2 10413
	kill targ
next

enum 2 12 10415
	kill targ
next

enum 1 1 10411
	kill targ
next

enum 1 1 10412
	kill targ
next

enum 2 2 10410
	kill targ
next

enum 1 1 10417
	kill targ
next

enum 1 1 10416
	kill targ
next

enum 3 8 12
	kill targ
next

enum 3 8 1
	kill targ
next

enum 3 8 13
	kill targ
next

enum 3 8 11
	kill targ
next

enum 3 8 6
	kill targ
next

enum 3 8 10
	kill targ
next

enum 2 14 4
	kill targ
next

enum 3 8 7
	kill targ
next

enum 3 8 18
	kill targ
next

enum 3 3 14
	kill targ
next

enum 3 8 17
	kill targ
next

enum 1 1 116
	kill targ
next

enum 1 1 118
	kill targ
next

enum 3 8 8
	kill targ
next

enum 3 8 2
	kill targ
next

enum 2 10 25
	kill targ
next

enum 2 23 1
	kill targ
next

enum 2 21 8
	kill targ
next

enum 2 11 2
	kill targ
next

enum 2 12 2
	kill targ
next

enum 3 1 1
	kill targ
next

enum 1 1 10406
	kill targ
next

enum 1 1 10407
	kill targ
next

enum 1 1 10408
	kill targ
next

enum 1 1 10409
	kill targ
next

enum 1 1 10410
	kill targ
next

enum 1 1 10412
	kill targ
next

enum 1 1 10412
	kill targ
next

enum 3 8 7
	kill targ
next

enum 2 23 1
	kill targ
next
enum 2 21 8
	kill targ
next
scrx 2 21 8 9

enum 2 11 2
	kill targ
next

scrx 2 23 1 1
scrx 2 11 2 12
scrx 2 23 1 6464
scrx 2 23 1 6463
scrx 2 11 2 6
scrx 2 23 1 9
scrx 3 8 7 100
scrx 3 1 1 1
scrx 3 1 1 2
scrx 3 1 1 9
scrx 3 1 1 1500
scrx 3 1 1 2000
scrx 3 1 1 2001
scrx 2 12 2 1
scrx 2 12 2 2
scrx 2 12 2 1500
scrx 2 12 2 1501
scrx 2 12 2 1000
scrx 2 23 1 1
scrx 2 11 2 12
scrx 2 23 1 6464
scrx 2 23 1 6463
scrx 2 11 2 6
scrx 2 23 1 9
scrx 2 21 8 9
scrx 3 8 2 1
scrx 2 10 25 6
scrx 3 8 8 1
scrx 3 8 8 2
scrx 3 8 8 9
scrx 3 8 8 1000
scrx 3 8 8 2000
scrx 3 8 18 1
scrx 3 8 18 2001
scrx 3 8 18 2002
scrx 3 8 18 2003
scrx 3 8 18 2004
scrx 3 8 18 2005
scrx 3 8 7 100
scrx 2 14 4 9
scrx 2 14 4 1
scrx 2 14 4 4
scrx 2 14 4 12
scrx 3 8 10 1
scrx 3 8 10 2
scrx 3 8 10 9
scrx 3 8 10 1000
scrx 3 8 10 2000
scrx 3 8 10 2001
scrx 3 8 6 1000
scrx 3 8 6 1001
scrx 3 8 6 1002
scrx 2 2 10410 1000
scrx 1 1 10412 1000
scrx 3 8 20 1
scrx 3 8 20 2000
scrx 3 8 20 2001
scrx 3 8 19 2000
scrx 3 8 19 2001
scrx 3 8 19 3
scrx 3 8 19 4
scrx 3 8 19 6
scrx 2 12 10414 1
scrx 2 12 10414 2
scrx 2 12 10414 4
scrx 2 12 10414 5
scrx 2 12 10414 9
scrx 2 12 10414 1000
scrx 2 12 10414 2000
scrx 2 12 10415 1
scrx 2 12 10415 2
scrx 2 12 10415 4
scrx 2 12 10415 5
scrx 2 12 10415 9
scrx 2 12 10415 1000
scrx 2 12 10415 2000
scrx 3 8 12 1064
scrx 3 8 12 1164
scrx 2 8 12 1264
scrx 3 8 12 3
scrx 3 8 12 1
scrx 3 8 1 1
scrx 3 8 1 2
scrx 3 8 1 9
scrx 3 8 1 1000
scrx 3 8 1 2000
scrx 3 8 1 2001
scrx 3 8 13 1
scrx 3 8 13 2
scrx 3 8 13 3
scrx 3 8 13 4
scrx 3 8 13 6
scrx 3 8 13 1000
scrx 3 8 13 1001
scrx 3 8 13 1002
scrx 3 8 13 1003
scrx 3 8 11 1
scrx 3 8 11 2
scrx 3 8 11 4
scrx 3 8 11 5
scrx 3 8 11 9
scrx 3 8 11 1000
scrx 3 8 11 2000

enum 2 2 10410
	kill targ
next

enum 1 1 10411
	kill targ
next

enum 1 1 10412
	kill targ
next

enum 2 2 10413
	kill targ
next

enum 2 12 10414
	kill targ
next

enum 2 12 10415
	kill targ
next

scrx 1 1 10417 9
scrx 1 1 10411 1001
scrx 1 1 10411 1002

enum 1 4 10600
	kill targ
next
scrx 1 1 10416 9